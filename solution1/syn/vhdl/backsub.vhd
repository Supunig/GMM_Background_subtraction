-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backsub is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_array_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_array_ce0 : OUT STD_LOGIC;
    data_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_frame_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    out_frame_ce0 : OUT STD_LOGIC;
    out_frame_we0 : OUT STD_LOGIC;
    out_frame_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of backsub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backsub,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.465000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1995,HLS_SYN_DSP=18,HLS_SYN_FF=7119,HLS_SYN_LUT=14009}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_42000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010000000000000000000000000";
    constant ap_const_lv32_43340000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011001101000000000000000000";
    constant ap_const_lv32_42F00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111100000000000000000000";
    constant ap_const_lv32_435C0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011010111000000000000000000";
    constant ap_const_lv32_43C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011110010000000000000000000";
    constant ap_const_lv32_3D4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101010011001100110011001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv19_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_const_lv19_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal mean_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_ce0 : STD_LOGIC;
    signal mean_we0 : STD_LOGIC;
    signal mean_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_ce1 : STD_LOGIC;
    signal mean_we1 : STD_LOGIC;
    signal mean_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sigma_ce0 : STD_LOGIC;
    signal sigma_we0 : STD_LOGIC;
    signal sigma_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sigma_ce1 : STD_LOGIC;
    signal sigma_we1 : STD_LOGIC;
    signal sigma_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal weight_ce0 : STD_LOGIC;
    signal weight_we0 : STD_LOGIC;
    signal weight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal weight_ce1 : STD_LOGIC;
    signal weight_we1 : STD_LOGIC;
    signal weight_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matchsum_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal matchsum_ce0 : STD_LOGIC;
    signal matchsum_we0 : STD_LOGIC;
    signal matchsum_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matchsum_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matchsum_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal matchsum_ce1 : STD_LOGIC;
    signal matchsum_we1 : STD_LOGIC;
    signal matchsum_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal back_gauss_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal back_gauss_ce0 : STD_LOGIC;
    signal back_gauss_we0 : STD_LOGIC;
    signal back_gauss_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal back_gauss_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal back_gauss_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal back_gauss_ce1 : STD_LOGIC;
    signal back_gauss_we1 : STD_LOGIC;
    signal back_gauss_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal init_read_read_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal idxRow_1_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxRow_1_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f1_cast_reg_802 : STD_LOGIC_VECTOR (15 downto 0);
    signal idxCols_1_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxCols_1_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal i_2_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_y1_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_y1_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_566_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_reg_830 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_578_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_reg_837 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal i_1_fu_594_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_reg_846 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_195 : BOOLEAN;
    signal tmp_fu_600_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_reg_851 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond4_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_2_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxRow_2_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal p_lshr_f_cast_reg_865 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond3_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCols_2_fu_746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxCols_2_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal i_3_fu_752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_y1_1_fu_762_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_y1_1_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_767_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_893 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_779_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_reg_900 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal grp_backsub_EM_ALGO_fu_435_ap_start : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_ap_done : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_ap_idle : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_ap_ready : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_pixel : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_pos_r : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_mean_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_mean_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_mean_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_mean_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_mean_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_sigma_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_sigma_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_sigma_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_sigma_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_sigma_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_weight_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_weight_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_weight_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_weight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_matchsum_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_matchsum_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_matchsum_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_matchsum_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_matchsum_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_ce1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_we1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_435_back_gauss_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_435_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow2_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxCols3_reg_390 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_300 : BOOLEAN;
    signal i_reg_401 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_312 : BOOLEAN;
    signal idxRow_reg_412 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxCols_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_329 : BOOLEAN;
    signal grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_342 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_349 : BOOLEAN;
    signal tmp_7_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl1_fu_495_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_507_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_503_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl2_cast_fu_515_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_519_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal idxCols3_cast2_fu_535_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_617_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_addr1_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_640_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_addr2_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_662_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mean_addr3_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_696_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_fu_708_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_cast_fu_704_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl3_cast_fu_716_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_720_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal idxCols_cast6_fu_736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component backsub_EM_ALGO IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pixel : IN STD_LOGIC_VECTOR (7 downto 0);
        pos_r : IN STD_LOGIC_VECTOR (16 downto 0);
        mean_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        mean_ce0 : OUT STD_LOGIC;
        mean_we0 : OUT STD_LOGIC;
        mean_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mean_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sigma_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        sigma_ce0 : OUT STD_LOGIC;
        sigma_we0 : OUT STD_LOGIC;
        sigma_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sigma_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_we0 : OUT STD_LOGIC;
        weight_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matchsum_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        matchsum_ce0 : OUT STD_LOGIC;
        matchsum_we0 : OUT STD_LOGIC;
        matchsum_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matchsum_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        back_gauss_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        back_gauss_ce0 : OUT STD_LOGIC;
        back_gauss_we0 : OUT STD_LOGIC;
        back_gauss_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        back_gauss_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        back_gauss_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        back_gauss_ce1 : OUT STD_LOGIC;
        back_gauss_we1 : OUT STD_LOGIC;
        back_gauss_d1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component backsub_mean IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_matchsum IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component backsub_back_gauss IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mean_U : component backsub_mean
    generic map (
        DataWidth => 32,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_address0,
        ce0 => mean_ce0,
        we0 => mean_we0,
        d0 => mean_d0,
        q0 => mean_q0,
        address1 => mean_address1,
        ce1 => mean_ce1,
        we1 => mean_we1,
        d1 => mean_d1);

    sigma_U : component backsub_mean
    generic map (
        DataWidth => 32,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sigma_address0,
        ce0 => sigma_ce0,
        we0 => sigma_we0,
        d0 => sigma_d0,
        q0 => sigma_q0,
        address1 => sigma_address1,
        ce1 => sigma_ce1,
        we1 => sigma_we1,
        d1 => sigma_d1);

    weight_U : component backsub_mean
    generic map (
        DataWidth => 32,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_address0,
        ce0 => weight_ce0,
        we0 => weight_we0,
        d0 => weight_d0,
        q0 => weight_q0,
        address1 => weight_address1,
        ce1 => weight_ce1,
        we1 => weight_we1,
        d1 => weight_d1);

    matchsum_U : component backsub_matchsum
    generic map (
        DataWidth => 8,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => matchsum_address0,
        ce0 => matchsum_ce0,
        we0 => matchsum_we0,
        d0 => matchsum_d0,
        q0 => matchsum_q0,
        address1 => matchsum_address1,
        ce1 => matchsum_ce1,
        we1 => matchsum_we1,
        d1 => matchsum_d1);

    back_gauss_U : component backsub_back_gauss
    generic map (
        DataWidth => 1,
        AddressRange => 307200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => back_gauss_address0,
        ce0 => back_gauss_ce0,
        we0 => back_gauss_we0,
        d0 => back_gauss_d0,
        q0 => back_gauss_q0,
        address1 => back_gauss_address1,
        ce1 => back_gauss_ce1,
        we1 => back_gauss_we1,
        d1 => back_gauss_d1);

    grp_backsub_EM_ALGO_fu_435 : component backsub_EM_ALGO
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_backsub_EM_ALGO_fu_435_ap_start,
        ap_done => grp_backsub_EM_ALGO_fu_435_ap_done,
        ap_idle => grp_backsub_EM_ALGO_fu_435_ap_idle,
        ap_ready => grp_backsub_EM_ALGO_fu_435_ap_ready,
        pixel => grp_backsub_EM_ALGO_fu_435_pixel,
        pos_r => grp_backsub_EM_ALGO_fu_435_pos_r,
        mean_address0 => grp_backsub_EM_ALGO_fu_435_mean_address0,
        mean_ce0 => grp_backsub_EM_ALGO_fu_435_mean_ce0,
        mean_we0 => grp_backsub_EM_ALGO_fu_435_mean_we0,
        mean_d0 => grp_backsub_EM_ALGO_fu_435_mean_d0,
        mean_q0 => grp_backsub_EM_ALGO_fu_435_mean_q0,
        sigma_address0 => grp_backsub_EM_ALGO_fu_435_sigma_address0,
        sigma_ce0 => grp_backsub_EM_ALGO_fu_435_sigma_ce0,
        sigma_we0 => grp_backsub_EM_ALGO_fu_435_sigma_we0,
        sigma_d0 => grp_backsub_EM_ALGO_fu_435_sigma_d0,
        sigma_q0 => grp_backsub_EM_ALGO_fu_435_sigma_q0,
        weight_address0 => grp_backsub_EM_ALGO_fu_435_weight_address0,
        weight_ce0 => grp_backsub_EM_ALGO_fu_435_weight_ce0,
        weight_we0 => grp_backsub_EM_ALGO_fu_435_weight_we0,
        weight_d0 => grp_backsub_EM_ALGO_fu_435_weight_d0,
        weight_q0 => grp_backsub_EM_ALGO_fu_435_weight_q0,
        matchsum_address0 => grp_backsub_EM_ALGO_fu_435_matchsum_address0,
        matchsum_ce0 => grp_backsub_EM_ALGO_fu_435_matchsum_ce0,
        matchsum_we0 => grp_backsub_EM_ALGO_fu_435_matchsum_we0,
        matchsum_d0 => grp_backsub_EM_ALGO_fu_435_matchsum_d0,
        matchsum_q0 => grp_backsub_EM_ALGO_fu_435_matchsum_q0,
        back_gauss_address0 => grp_backsub_EM_ALGO_fu_435_back_gauss_address0,
        back_gauss_ce0 => grp_backsub_EM_ALGO_fu_435_back_gauss_ce0,
        back_gauss_we0 => grp_backsub_EM_ALGO_fu_435_back_gauss_we0,
        back_gauss_d0 => grp_backsub_EM_ALGO_fu_435_back_gauss_d0,
        back_gauss_q0 => grp_backsub_EM_ALGO_fu_435_back_gauss_q0,
        back_gauss_address1 => grp_backsub_EM_ALGO_fu_435_back_gauss_address1,
        back_gauss_ce1 => grp_backsub_EM_ALGO_fu_435_back_gauss_ce1,
        back_gauss_we1 => grp_backsub_EM_ALGO_fu_435_back_gauss_we1,
        back_gauss_d1 => grp_backsub_EM_ALGO_fu_435_back_gauss_d1,
        ap_return => grp_backsub_EM_ALGO_fu_435_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg assign process. --
    grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
                    grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_backsub_EM_ALGO_fu_435_ap_ready)) then 
                    grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_401 assign process. --
    i_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((init_read_read_fu_110_p2 = ap_const_lv1_0)))) then 
                i_reg_401 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                i_reg_401 <= i_1_reg_846;
            end if; 
        end if;
    end process;

    -- idxCols3_reg_390 assign process. --
    idxCols3_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)))) then 
                idxCols3_reg_390 <= idxCols_1_reg_810;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_483_p2 = ap_const_lv1_0))) then 
                idxCols3_reg_390 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- idxCols_reg_423 assign process. --
    idxCols_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
                idxCols_reg_423 <= idxCols_2_reg_873;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((init_read_read_fu_110_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond3_fu_684_p2))) then 
                idxCols_reg_423 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- idxRow2_reg_379 assign process. --
    idxRow2_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_539_p2)))) then 
                idxRow2_reg_379 <= idxRow_1_reg_797;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (init_read_read_fu_110_p2 = ap_const_lv1_0))) then 
                idxRow2_reg_379 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- idxRow_reg_412 assign process. --
    idxRow_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond2_fu_740_p2)))) then 
                idxRow_reg_412 <= idxRow_2_reg_860;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond4_fu_588_p2)))) then 
                idxRow_reg_412 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                exitcond1_reg_793 <= exitcond1_fu_483_p2;
                idxRow_1_reg_797 <= idxRow_1_fu_489_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                i_1_reg_846 <= i_1_fu_594_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_539_p2))) then
                i_2_reg_815 <= i_2_fu_551_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond2_fu_740_p2))) then
                i_3_reg_878 <= i_3_fu_752_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                idxCols_1_reg_810 <= idxCols_1_fu_545_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                idxCols_2_reg_873 <= idxCols_2_fu_746_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((init_read_read_fu_110_p2 = ap_const_lv1_0)))) then
                idxRow_2_reg_860 <= idxRow_2_fu_690_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_483_p2 = ap_const_lv1_0))) then
                p_lshr_f1_cast_reg_802 <= tmp_2_fu_519_p2(16 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((init_read_read_fu_110_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond3_fu_684_p2))) then
                p_lshr_f_cast_reg_865 <= tmp_4_fu_720_p2(16 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                pix_y1_1_reg_888 <= pix_y1_1_fu_762_p1;
                tmp_5_reg_893(1) <= tmp_5_fu_767_p3(1);
    tmp_5_reg_893(2) <= tmp_5_fu_767_p3(2);
    tmp_5_reg_893(3) <= tmp_5_fu_767_p3(3);
    tmp_5_reg_893(4) <= tmp_5_fu_767_p3(4);
    tmp_5_reg_893(5) <= tmp_5_fu_767_p3(5);
    tmp_5_reg_893(6) <= tmp_5_fu_767_p3(6);
    tmp_5_reg_893(7) <= tmp_5_fu_767_p3(7);
    tmp_5_reg_893(8) <= tmp_5_fu_767_p3(8);
    tmp_5_reg_893(9) <= tmp_5_fu_767_p3(9);
    tmp_5_reg_893(10) <= tmp_5_fu_767_p3(10);
    tmp_5_reg_893(11) <= tmp_5_fu_767_p3(11);
    tmp_5_reg_893(12) <= tmp_5_fu_767_p3(12);
    tmp_5_reg_893(13) <= tmp_5_fu_767_p3(13);
    tmp_5_reg_893(14) <= tmp_5_fu_767_p3(14);
    tmp_5_reg_893(15) <= tmp_5_fu_767_p3(15);
    tmp_5_reg_893(16) <= tmp_5_fu_767_p3(16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                pix_y1_reg_825 <= pix_y1_fu_561_p1;
                tmp_8_reg_830(1) <= tmp_8_fu_566_p3(1);
    tmp_8_reg_830(2) <= tmp_8_fu_566_p3(2);
    tmp_8_reg_830(3) <= tmp_8_fu_566_p3(3);
    tmp_8_reg_830(4) <= tmp_8_fu_566_p3(4);
    tmp_8_reg_830(5) <= tmp_8_fu_566_p3(5);
    tmp_8_reg_830(6) <= tmp_8_fu_566_p3(6);
    tmp_8_reg_830(7) <= tmp_8_fu_566_p3(7);
    tmp_8_reg_830(8) <= tmp_8_fu_566_p3(8);
    tmp_8_reg_830(9) <= tmp_8_fu_566_p3(9);
    tmp_8_reg_830(10) <= tmp_8_fu_566_p3(10);
    tmp_8_reg_830(11) <= tmp_8_fu_566_p3(11);
    tmp_8_reg_830(12) <= tmp_8_fu_566_p3(12);
    tmp_8_reg_830(13) <= tmp_8_fu_566_p3(13);
    tmp_8_reg_830(14) <= tmp_8_fu_566_p3(14);
    tmp_8_reg_830(15) <= tmp_8_fu_566_p3(15);
    tmp_8_reg_830(16) <= tmp_8_fu_566_p3(16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                reg_478 <= data_array_q0(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_12_reg_837(1) <= tmp_12_fu_578_p2(1);
    tmp_12_reg_837(2) <= tmp_12_fu_578_p2(2);
    tmp_12_reg_837(3) <= tmp_12_fu_578_p2(3);
    tmp_12_reg_837(4) <= tmp_12_fu_578_p2(4);
    tmp_12_reg_837(5) <= tmp_12_fu_578_p2(5);
    tmp_12_reg_837(6) <= tmp_12_fu_578_p2(6);
    tmp_12_reg_837(7) <= tmp_12_fu_578_p2(7);
    tmp_12_reg_837(8) <= tmp_12_fu_578_p2(8);
    tmp_12_reg_837(9) <= tmp_12_fu_578_p2(9);
    tmp_12_reg_837(10) <= tmp_12_fu_578_p2(10);
    tmp_12_reg_837(11) <= tmp_12_fu_578_p2(11);
    tmp_12_reg_837(12) <= tmp_12_fu_578_p2(12);
    tmp_12_reg_837(13) <= tmp_12_fu_578_p2(13);
    tmp_12_reg_837(14) <= tmp_12_fu_578_p2(14);
    tmp_12_reg_837(15) <= tmp_12_fu_578_p2(15);
    tmp_12_reg_837(16) <= tmp_12_fu_578_p2(16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_14_reg_900(1) <= tmp_14_fu_779_p2(1);
    tmp_14_reg_900(2) <= tmp_14_fu_779_p2(2);
    tmp_14_reg_900(3) <= tmp_14_fu_779_p2(3);
    tmp_14_reg_900(4) <= tmp_14_fu_779_p2(4);
    tmp_14_reg_900(5) <= tmp_14_fu_779_p2(5);
    tmp_14_reg_900(6) <= tmp_14_fu_779_p2(6);
    tmp_14_reg_900(7) <= tmp_14_fu_779_p2(7);
    tmp_14_reg_900(8) <= tmp_14_fu_779_p2(8);
    tmp_14_reg_900(9) <= tmp_14_fu_779_p2(9);
    tmp_14_reg_900(10) <= tmp_14_fu_779_p2(10);
    tmp_14_reg_900(11) <= tmp_14_fu_779_p2(11);
    tmp_14_reg_900(12) <= tmp_14_fu_779_p2(12);
    tmp_14_reg_900(13) <= tmp_14_fu_779_p2(13);
    tmp_14_reg_900(14) <= tmp_14_fu_779_p2(14);
    tmp_14_reg_900(15) <= tmp_14_fu_779_p2(15);
    tmp_14_reg_900(16) <= tmp_14_fu_779_p2(16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2))) then
                tmp_reg_851(2) <= tmp_fu_600_p3(2);
    tmp_reg_851(3) <= tmp_fu_600_p3(3);
    tmp_reg_851(4) <= tmp_fu_600_p3(4);
    tmp_reg_851(5) <= tmp_fu_600_p3(5);
    tmp_reg_851(6) <= tmp_fu_600_p3(6);
    tmp_reg_851(7) <= tmp_fu_600_p3(7);
    tmp_reg_851(8) <= tmp_fu_600_p3(8);
    tmp_reg_851(9) <= tmp_fu_600_p3(9);
    tmp_reg_851(10) <= tmp_fu_600_p3(10);
    tmp_reg_851(11) <= tmp_fu_600_p3(11);
    tmp_reg_851(12) <= tmp_fu_600_p3(12);
    tmp_reg_851(13) <= tmp_fu_600_p3(13);
    tmp_reg_851(14) <= tmp_fu_600_p3(14);
    tmp_reg_851(15) <= tmp_fu_600_p3(15);
    tmp_reg_851(16) <= tmp_fu_600_p3(16);
    tmp_reg_851(17) <= tmp_fu_600_p3(17);
    tmp_reg_851(18) <= tmp_fu_600_p3(18);
            end if;
        end if;
    end process;
    tmp_8_reg_830(0) <= '0';
    tmp_12_reg_837(0) <= '1';
    tmp_reg_851(1 downto 0) <= "00";
    tmp_5_reg_893(0) <= '0';
    tmp_14_reg_900(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, init_read_read_fu_110_p2, exitcond1_fu_483_p2, exitcond1_reg_793, exitcond_fu_539_p2, exitcond4_fu_588_p2, exitcond3_fu_684_p2, exitcond2_fu_740_p2, grp_backsub_EM_ALGO_fu_435_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((init_read_read_fu_110_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                elsif ((not((ap_start = ap_const_logic_0)) and (init_read_read_fu_110_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond1_fu_483_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond_fu_539_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_588_p2))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st10_fsm_9 => 
                if ((((init_read_read_fu_110_p2 = ap_const_lv1_0) and not((exitcond1_reg_793 = ap_const_lv1_0))) or (not((init_read_read_fu_110_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond3_fu_684_p2))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                if ((ap_const_lv1_0 = exitcond2_fu_740_p2)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(init_read_read_fu_110_p2, exitcond1_reg_793, ap_sig_cseq_ST_st10_fsm_9, exitcond3_fu_684_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (((init_read_read_fu_110_p2 = ap_const_lv1_0) and not((exitcond1_reg_793 = ap_const_lv1_0))) or (not((init_read_read_fu_110_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond3_fu_684_p2)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(init_read_read_fu_110_p2, exitcond1_reg_793, ap_sig_cseq_ST_st10_fsm_9, exitcond3_fu_684_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (((init_read_read_fu_110_p2 = ap_const_lv1_0) and not((exitcond1_reg_793 = ap_const_lv1_0))) or (not((init_read_read_fu_110_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond3_fu_684_p2)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_186 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_195 assign process. --
    ap_sig_bdd_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_195 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_209 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_227 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_300 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_312 assign process. --
    ap_sig_bdd_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_312 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_329 assign process. --
    ap_sig_bdd_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_329 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_342 assign process. --
    ap_sig_bdd_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_342 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_349 assign process. --
    ap_sig_bdd_349_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_349 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_209)
    begin
        if (ap_sig_bdd_209) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_227)
    begin
        if (ap_sig_bdd_227) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_349)
    begin
        if (ap_sig_bdd_349) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_329)
    begin
        if (ap_sig_bdd_329) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_342)
    begin
        if (ap_sig_bdd_342) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_186)
    begin
        if (ap_sig_bdd_186) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_300)
    begin
        if (ap_sig_bdd_300) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_195)
    begin
        if (ap_sig_bdd_195) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_312)
    begin
        if (ap_sig_bdd_312) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_address0 assign process. --
    back_gauss_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_1_fu_608_p1, tmp_20_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            back_gauss_address0 <= tmp_20_fu_653_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            back_gauss_address0 <= tmp_1_fu_608_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_address0 <= grp_backsub_EM_ALGO_fu_435_back_gauss_address0;
        else 
            back_gauss_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- back_gauss_address1 assign process. --
    back_gauss_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_address1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_17_fu_631_p1, tmp_22_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            back_gauss_address1 <= tmp_22_fu_675_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            back_gauss_address1 <= tmp_17_fu_631_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_address1 <= grp_backsub_EM_ALGO_fu_435_back_gauss_address1;
        else 
            back_gauss_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- back_gauss_ce0 assign process. --
    back_gauss_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_ce0 <= grp_backsub_EM_ALGO_fu_435_back_gauss_ce0;
        else 
            back_gauss_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_ce1 assign process. --
    back_gauss_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_ce1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_ce1 <= grp_backsub_EM_ALGO_fu_435_back_gauss_ce1;
        else 
            back_gauss_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_d0 assign process. --
    back_gauss_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_d0 <= grp_backsub_EM_ALGO_fu_435_back_gauss_d0;
        else 
            back_gauss_d0 <= "X";
        end if; 
    end process;


    -- back_gauss_d1 assign process. --
    back_gauss_d1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_back_gauss_d1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_d1 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_d1 <= grp_backsub_EM_ALGO_fu_435_back_gauss_d1;
        else 
            back_gauss_d1 <= "X";
        end if; 
    end process;


    -- back_gauss_we0 assign process. --
    back_gauss_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_back_gauss_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_we0 <= grp_backsub_EM_ALGO_fu_435_back_gauss_we0;
        else 
            back_gauss_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_we1 assign process. --
    back_gauss_we1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_back_gauss_we1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            back_gauss_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            back_gauss_we1 <= grp_backsub_EM_ALGO_fu_435_back_gauss_we1;
        else 
            back_gauss_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- data_array_address0 assign process. --
    data_array_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10, tmp_7_fu_556_p1, tmp_6_fu_757_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            data_array_address0 <= tmp_6_fu_757_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            data_array_address0 <= tmp_7_fu_556_p1(16 - 1 downto 0);
        else 
            data_array_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- data_array_ce0 assign process. --
    data_array_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            data_array_ce0 <= ap_const_logic_1;
        else 
            data_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_483_p2 <= "1" when (idxRow2_reg_379 = ap_const_lv8_F0) else "0";
    exitcond2_fu_740_p2 <= "1" when (idxCols_reg_423 = ap_const_lv8_A0) else "0";
    exitcond3_fu_684_p2 <= "1" when (idxRow_reg_412 = ap_const_lv8_F0) else "0";
    exitcond4_fu_588_p2 <= "1" when (i_reg_401 = ap_const_lv17_12C00) else "0";
    exitcond_fu_539_p2 <= "1" when (idxCols3_reg_390 = ap_const_lv8_A0) else "0";
    grp_backsub_EM_ALGO_fu_435_ap_start <= grp_backsub_EM_ALGO_fu_435_ap_start_ap_start_reg;
    grp_backsub_EM_ALGO_fu_435_back_gauss_q0 <= back_gauss_q0;
    grp_backsub_EM_ALGO_fu_435_matchsum_q0 <= matchsum_q0;
    grp_backsub_EM_ALGO_fu_435_mean_q0 <= mean_q0;

    -- grp_backsub_EM_ALGO_fu_435_pixel assign process. --
    grp_backsub_EM_ALGO_fu_435_pixel_assign_proc : process(reg_478, pix_y1_reg_825, pix_y1_1_reg_888, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_backsub_EM_ALGO_fu_435_pixel <= pix_y1_1_reg_888;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            grp_backsub_EM_ALGO_fu_435_pixel <= reg_478;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_backsub_EM_ALGO_fu_435_pixel <= pix_y1_reg_825;
        else 
            grp_backsub_EM_ALGO_fu_435_pixel <= "XXXXXXXX";
        end if; 
    end process;


    -- grp_backsub_EM_ALGO_fu_435_pos_r assign process. --
    grp_backsub_EM_ALGO_fu_435_pos_r_assign_proc : process(tmp_8_reg_830, tmp_12_reg_837, tmp_5_reg_893, tmp_14_reg_900, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            grp_backsub_EM_ALGO_fu_435_pos_r <= tmp_14_reg_900;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_backsub_EM_ALGO_fu_435_pos_r <= tmp_5_reg_893;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_backsub_EM_ALGO_fu_435_pos_r <= tmp_12_reg_837;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_backsub_EM_ALGO_fu_435_pos_r <= tmp_8_reg_830;
        else 
            grp_backsub_EM_ALGO_fu_435_pos_r <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_backsub_EM_ALGO_fu_435_sigma_q0 <= sigma_q0;
    grp_backsub_EM_ALGO_fu_435_weight_q0 <= weight_q0;
    i_1_fu_594_p2 <= std_logic_vector(unsigned(i_reg_401) + unsigned(ap_const_lv17_1));
    i_2_fu_551_p2 <= std_logic_vector(unsigned(idxCols3_cast2_fu_535_p1) + unsigned(p_lshr_f1_cast_reg_802));
    i_3_fu_752_p2 <= std_logic_vector(unsigned(idxCols_cast6_fu_736_p1) + unsigned(p_lshr_f_cast_reg_865));
    idxCols3_cast2_fu_535_p1 <= std_logic_vector(resize(unsigned(idxCols3_reg_390),16));
    idxCols_1_fu_545_p2 <= std_logic_vector(unsigned(idxCols3_reg_390) + unsigned(ap_const_lv8_1));
    idxCols_2_fu_746_p2 <= std_logic_vector(unsigned(idxCols_reg_423) + unsigned(ap_const_lv8_1));
    idxCols_cast6_fu_736_p1 <= std_logic_vector(resize(unsigned(idxCols_reg_423),16));
    idxRow_1_fu_489_p2 <= std_logic_vector(unsigned(idxRow2_reg_379) + unsigned(ap_const_lv8_1));
    idxRow_2_fu_690_p2 <= std_logic_vector(unsigned(idxRow_reg_412) + unsigned(ap_const_lv8_1));
    init_read_read_fu_110_p2 <= (0=>init, others=>'-');

    -- matchsum_address0 assign process. --
    matchsum_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_matchsum_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_1_fu_608_p1, tmp_20_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            matchsum_address0 <= tmp_20_fu_653_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            matchsum_address0 <= tmp_1_fu_608_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            matchsum_address0 <= grp_backsub_EM_ALGO_fu_435_matchsum_address0;
        else 
            matchsum_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- matchsum_address1 assign process. --
    matchsum_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, tmp_17_fu_631_p1, tmp_22_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            matchsum_address1 <= tmp_22_fu_675_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            matchsum_address1 <= tmp_17_fu_631_p1(19 - 1 downto 0);
        else 
            matchsum_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- matchsum_ce0 assign process. --
    matchsum_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_matchsum_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            matchsum_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            matchsum_ce0 <= grp_backsub_EM_ALGO_fu_435_matchsum_ce0;
        else 
            matchsum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_ce1 assign process. --
    matchsum_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            matchsum_ce1 <= ap_const_logic_1;
        else 
            matchsum_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_d0 assign process. --
    matchsum_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_matchsum_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            matchsum_d0 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            matchsum_d0 <= grp_backsub_EM_ALGO_fu_435_matchsum_d0;
        else 
            matchsum_d0 <= "XXXXXXXX";
        end if; 
    end process;

    matchsum_d1 <= ap_const_lv8_0;

    -- matchsum_we0 assign process. --
    matchsum_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_matchsum_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            matchsum_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            matchsum_we0 <= grp_backsub_EM_ALGO_fu_435_matchsum_we0;
        else 
            matchsum_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_we1 assign process. --
    matchsum_we1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            matchsum_we1 <= ap_const_logic_1;
        else 
            matchsum_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mean_addr1_fu_623_p3 <= (ap_const_lv13_0 & tmp_11_fu_617_p2);
    mean_addr2_fu_645_p3 <= (ap_const_lv13_0 & tmp_19_fu_640_p2);
    mean_addr3_fu_667_p3 <= (ap_const_lv13_0 & tmp_21_fu_662_p2);

    -- mean_address0 assign process. --
    mean_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_mean_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_1_fu_608_p1, tmp_20_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mean_address0 <= tmp_20_fu_653_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mean_address0 <= tmp_1_fu_608_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            mean_address0 <= grp_backsub_EM_ALGO_fu_435_mean_address0;
        else 
            mean_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- mean_address1 assign process. --
    mean_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, tmp_17_fu_631_p1, tmp_22_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mean_address1 <= tmp_22_fu_675_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mean_address1 <= tmp_17_fu_631_p1(19 - 1 downto 0);
        else 
            mean_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- mean_ce0 assign process. --
    mean_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_mean_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mean_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            mean_ce0 <= grp_backsub_EM_ALGO_fu_435_mean_ce0;
        else 
            mean_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mean_ce1 assign process. --
    mean_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mean_ce1 <= ap_const_logic_1;
        else 
            mean_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- mean_d0 assign process. --
    mean_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_mean_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mean_d0 <= ap_const_lv32_43340000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mean_d0 <= ap_const_lv32_42000000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            mean_d0 <= grp_backsub_EM_ALGO_fu_435_mean_d0;
        else 
            mean_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- mean_d1 assign process. --
    mean_d1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            mean_d1 <= ap_const_lv32_435C0000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mean_d1 <= ap_const_lv32_42F00000;
        else 
            mean_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- mean_we0 assign process. --
    mean_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_mean_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mean_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            mean_we0 <= grp_backsub_EM_ALGO_fu_435_mean_we0;
        else 
            mean_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mean_we1 assign process. --
    mean_we1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mean_we1 <= ap_const_logic_1;
        else 
            mean_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- out_frame_address0 assign process. --
    out_frame_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_s_fu_574_p1, tmp_16_fu_584_p1, tmp_10_fu_775_p1, tmp_18_fu_785_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            out_frame_address0 <= tmp_18_fu_785_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            out_frame_address0 <= tmp_10_fu_775_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_frame_address0 <= tmp_16_fu_584_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            out_frame_address0 <= tmp_s_fu_574_p1(17 - 1 downto 0);
        else 
            out_frame_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- out_frame_ce0 assign process. --
    out_frame_ce0_assign_proc : process(grp_backsub_EM_ALGO_fu_435_ap_done, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)))) then 
            out_frame_ce0 <= ap_const_logic_1;
        else 
            out_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_frame_d0 <= 
        ap_const_lv8_FF when (grp_backsub_EM_ALGO_fu_435_ap_return(0) = '1') else 
        ap_const_lv8_0;

    -- out_frame_we0 assign process. --
    out_frame_we0_assign_proc : process(grp_backsub_EM_ALGO_fu_435_ap_done, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done))) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_435_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)))) then 
            out_frame_we0 <= ap_const_logic_1;
        else 
            out_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_503_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_495_p3),17));
    p_shl1_fu_495_p3 <= (idxRow2_reg_379 & ap_const_lv8_0);
    p_shl2_cast_fu_515_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_507_p3),17));
    p_shl2_fu_507_p3 <= (idxRow2_reg_379 & ap_const_lv6_0);
    p_shl3_cast_fu_716_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_708_p3),17));
    p_shl3_fu_708_p3 <= (idxRow_reg_412 & ap_const_lv6_0);
    p_shl_cast_fu_704_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_696_p3),17));
    p_shl_fu_696_p3 <= (idxRow_reg_412 & ap_const_lv8_0);
    pix_y1_1_fu_762_p1 <= data_array_q0(8 - 1 downto 0);
    pix_y1_fu_561_p1 <= data_array_q0(8 - 1 downto 0);

    -- sigma_address0 assign process. --
    sigma_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_sigma_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_1_fu_608_p1, tmp_20_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sigma_address0 <= tmp_20_fu_653_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            sigma_address0 <= tmp_1_fu_608_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sigma_address0 <= grp_backsub_EM_ALGO_fu_435_sigma_address0;
        else 
            sigma_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- sigma_address1 assign process. --
    sigma_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, tmp_17_fu_631_p1, tmp_22_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sigma_address1 <= tmp_22_fu_675_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            sigma_address1 <= tmp_17_fu_631_p1(19 - 1 downto 0);
        else 
            sigma_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- sigma_ce0 assign process. --
    sigma_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_sigma_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sigma_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sigma_ce0 <= grp_backsub_EM_ALGO_fu_435_sigma_ce0;
        else 
            sigma_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- sigma_ce1 assign process. --
    sigma_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sigma_ce1 <= ap_const_logic_1;
        else 
            sigma_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- sigma_d0 assign process. --
    sigma_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_sigma_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sigma_d0 <= ap_const_lv32_43C80000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sigma_d0 <= grp_backsub_EM_ALGO_fu_435_sigma_d0;
        else 
            sigma_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    sigma_d1 <= ap_const_lv32_43C80000;

    -- sigma_we0 assign process. --
    sigma_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_sigma_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sigma_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sigma_we0 <= grp_backsub_EM_ALGO_fu_435_sigma_we0;
        else 
            sigma_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- sigma_we1 assign process. --
    sigma_we1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sigma_we1 <= ap_const_logic_1;
        else 
            sigma_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_775_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_893),64));
    tmp_11_fu_617_p2 <= (tmp_fu_600_p3 or ap_const_lv19_1);
    tmp_12_fu_578_p2 <= (tmp_8_reg_830 or ap_const_lv17_1);
    tmp_14_fu_779_p2 <= (tmp_5_reg_893 or ap_const_lv17_1);
    tmp_16_fu_584_p1 <= std_logic_vector(resize(unsigned(tmp_12_reg_837),64));
    tmp_17_fu_631_p1 <= std_logic_vector(resize(unsigned(mean_addr1_fu_623_p3),64));
    tmp_18_fu_785_p1 <= std_logic_vector(resize(unsigned(tmp_14_reg_900),64));
    tmp_19_fu_640_p2 <= (tmp_reg_851 or ap_const_lv19_2);
    tmp_1_fu_608_p1 <= std_logic_vector(resize(unsigned(tmp_fu_600_p3),64));
    tmp_20_fu_653_p1 <= std_logic_vector(resize(unsigned(mean_addr2_fu_645_p3),64));
    tmp_21_fu_662_p2 <= (tmp_reg_851 or ap_const_lv19_3);
    tmp_22_fu_675_p1 <= std_logic_vector(resize(unsigned(mean_addr3_fu_667_p3),64));
    tmp_2_fu_519_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_503_p1) + unsigned(p_shl2_cast_fu_515_p1));
    tmp_4_fu_720_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_704_p1) + unsigned(p_shl3_cast_fu_716_p1));
    tmp_5_fu_767_p3 <= (i_3_reg_878 & ap_const_lv1_0);
    tmp_6_fu_757_p1 <= std_logic_vector(resize(unsigned(i_3_fu_752_p2),64));
    tmp_7_fu_556_p1 <= std_logic_vector(resize(unsigned(i_2_fu_551_p2),64));
    tmp_8_fu_566_p3 <= (i_2_reg_815 & ap_const_lv1_0);
    tmp_fu_600_p3 <= (i_reg_401 & ap_const_lv2_0);
    tmp_s_fu_574_p1 <= std_logic_vector(resize(unsigned(tmp_8_reg_830),64));

    -- weight_address0 assign process. --
    weight_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_weight_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, tmp_1_fu_608_p1, tmp_20_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            weight_address0 <= tmp_20_fu_653_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            weight_address0 <= tmp_1_fu_608_p1(19 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            weight_address0 <= grp_backsub_EM_ALGO_fu_435_weight_address0;
        else 
            weight_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_address1 assign process. --
    weight_address1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, tmp_17_fu_631_p1, tmp_22_fu_675_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            weight_address1 <= tmp_22_fu_675_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            weight_address1 <= tmp_17_fu_631_p1(19 - 1 downto 0);
        else 
            weight_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_ce0 assign process. --
    weight_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_weight_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            weight_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            weight_ce0 <= grp_backsub_EM_ALGO_fu_435_weight_ce0;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_ce1 assign process. --
    weight_ce1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            weight_ce1 <= ap_const_logic_1;
        else 
            weight_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_d0 assign process. --
    weight_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_backsub_EM_ALGO_fu_435_weight_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            weight_d0 <= ap_const_lv32_3D4CCCCD;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            weight_d0 <= grp_backsub_EM_ALGO_fu_435_weight_d0;
        else 
            weight_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    weight_d1 <= ap_const_lv32_3D4CCCCD;

    -- weight_we0 assign process. --
    weight_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, grp_backsub_EM_ALGO_fu_435_weight_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            weight_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            weight_we0 <= grp_backsub_EM_ALGO_fu_435_weight_we0;
        else 
            weight_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_we1 assign process. --
    weight_we1_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, exitcond4_fu_588_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_588_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            weight_we1 <= ap_const_logic_1;
        else 
            weight_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
